task setup << {
	apply plugin: 'installer-platform-plugin'
	apply plugin: 'installer-addon-plugin'

	def pl = platformFactory.createPlatform()

	pl.extensions {
		extensionNames (
			'acceleratorcms',
			'addonsupport',
			'b2ctelcocheckoutaddon',
			'b2ctelcocockpits',
			'b2ctelcostore',
			'b2ctelcostorefront',
			'cissubscription',
			'commercesearchbackoffice',
			'commerceservicesbackoffice',
			'entitlementstorefront',
			'mcc',
			'solrfacetsearchbackoffice',
			'solrserver',
			'subscriptionbackoffice',
			'subscriptionserviceshmc',
			'subscriptionstorefront',
			'yacceleratorcockpits',
			'yacceleratorcore',
			'yacceleratorfulfilmentprocess',
			'yacceleratorstorefront',
			'ycommercewebservices'
		)
	}

	pl.localProperties {
		properties (
			"cis.client.subscription.mock": "true",
		)
	}

	pl.setup()

	pl.project.addons {
		names "b2ctelcostorefront,b2ctelcocheckoutaddon"
		b2c "yacceleratorstorefront"
		platform pl
	}
	pl.project.addons {
		names "entitlementstorefront"
		b2c "yacceleratorstorefront"
		platform pl
	}
	pl.project.addons {
		names 'subscriptionstorefront'
		b2c 'yacceleratorstorefront'
		platform pl
	}
}

task initialize << {
	apply plugin: 'installer-platform-plugin'
	def platform = platformFactory.createPlatform()
	platform.build()
	platform.initialize()
}

task start << {
	apply plugin: 'installer-platform-plugin'
	def platform = platformFactory.createPlatform()
	platform.startInBackground()
}

task stop << {
	apply plugin: 'installer-platform-plugin'
	def platform = platformFactory.createPlatform()
	platform.stopInBackground()
}

